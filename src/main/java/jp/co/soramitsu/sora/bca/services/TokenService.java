package jp.co.soramitsu.sora.bca.services;

public interface TokenService {

  /**
   * Generates already signed and BASE64-ed JWT token with header.payload.signature
   *
   * @param subject to inject into payload
   * @return ready to return to client JWT token (signed)
   * */
  String generateToken(String subject);

  /**
   * Verifies and returns claim `sub` (subject) from valid token
   * Implementation will throw if token is invalid
   *
   * @param token generated by {{@link #generateToken(String)}}
   * @return claim `sub` of the token claims, subject basically
   * */
  String extractSubject(String token);

  /**
   * Blacklists token even if it's valid according to signature/payload integrity
   *
   * This is required for providing Log Out feature, as it's only relatively low-cost solution
   * for enforcing stateless token invalidation
   *
   * @param token to invalidate
   * */
  void blacklist(String token);

}
